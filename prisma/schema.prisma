generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  ORGANIZER
  VIEWER
}

enum EventStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  hashedPassword String?
  role          Role     @default(VIEWER)
  events        Event[]  @relation("UserEvents")
  images        Image[]  @relation("UserImages")
  instagramAccounts InstagramAccount[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Event {
  id            String       @id @default(cuid())
  slug          String       @unique
  title         String
  description   String?
  ticketUrl     String?
  buttonType    String       @default("RSVP") // "RSVP" or "BUY_TICKETS"
  locationName  String?
  address       String?
  city          String?
  state         String?
  latitude      Float?
  longitude     Float?
  startAt       DateTime
  endAt         DateTime?
  timezone      String       @default("America/Los_Angeles")
  status        EventStatus  @default(DRAFT)

  heroImageId   String?
  heroImage     Image?       @relation("EventHeroImage", fields: [heroImageId], references: [id])

  ownerId       String
  owner         User         @relation("UserEvents", fields: [ownerId], references: [id])

  images        Image[]       @relation("EventImages")
  galleries     Gallery[]     @relation("EventGallery")
  coordination  Coordination[] @relation("EventCoordination")
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([status, startAt])
  @@index([ownerId])
}

model Image {
  id            String   @id @default(cuid())
  eventId       String?
  event         Event?   @relation("EventImages", fields: [eventId], references: [id])
  uploaderId    String
  uploader      User     @relation("UserImages", fields: [uploaderId], references: [id])

  originalKey   String
  format        String    // "jpeg" | "png" | "webp" | "avif"
  width         Int
  height        Int

  // variants JSON: { "thumb":{"w":300,"h":auto,"key":"..."}, "card":{"w":600,"key":"..."} ... }
  variants      Json

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Hero image relation
  heroForEvents Event[]  @relation("EventHeroImage")
  
  // Gallery images relation
  galleryImages GalleryImage[] @relation("ImageGalleries")

  @@index([eventId])
}

model Gallery {
  id          String         @id @default(cuid())
  name        String
  description String?
  eventId     String?
  event       Event?         @relation("EventGallery", fields: [eventId], references: [id])
  
  images      GalleryImage[] @relation("GalleryImages")
  tags        String[]       // Array of tags for filtering
  
  isPublic    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  
  @@index([eventId])
  @@index([tags])
}

model GalleryImage {
  id         String   @id @default(cuid())
  galleryId  String
  gallery    Gallery  @relation("GalleryImages", fields: [galleryId], references: [id], onDelete: Cascade)
  
  imageId    String
  image      Image    @relation("ImageGalleries", fields: [imageId], references: [id], onDelete: Cascade)
  
  title      String?
  caption    String?
  tags       String[] // Individual image tags
  
  sortOrder  Int      @default(0)
  createdAt  DateTime @default(now())
  
  @@unique([galleryId, imageId])
  @@index([galleryId, sortOrder])
  @@index([tags])
}

enum CoordinationDocumentType {
  MAP
  RUN_OF_SHOW
  ITINERARY
  SCHEDULE
  DIAGRAM
  RIDER
  NOTES
  OTHER
}

model Coordination {
  id          String   @id @default(cuid())
  eventId     String
  event       Event    @relation("EventCoordination", fields: [eventId], references: [id], onDelete: Cascade)
  
  title       String
  description String?
  notes       String?
  specialMessage String?
  pointOfContacts Json? // Array of {name, number, email} objects
  
  shareToken  String   @unique @default(cuid())
  slug        String?  @unique
  isActive    Boolean  @default(true)
  isArchived  Boolean  @default(false)
  
  documents   CoordinationDocument[] @relation("CoordinationDocuments")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([eventId])
  @@index([shareToken])
  @@index([slug])
}

model CoordinationDocument {
  id              String                   @id @default(cuid())
  coordinationId  String
  coordination    Coordination             @relation("CoordinationDocuments", fields: [coordinationId], references: [id], onDelete: Cascade)
  
  title           String
  description     String?
  type            CoordinationDocumentType
  fileUrl         String
  fileName        String
  fileSize        Int
  mimeType        String
  
  sortOrder       Int                      @default(0)
  createdAt       DateTime                 @default(now())
  
  @@index([coordinationId, sortOrder])
  @@index([type])
}

// Instagram integration

model InstagramAccount {
  id               String   @id @default(cuid())
  userId           String   // owner in our system who connected the account
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  igUserId         String   @unique // Instagram user ID
  username         String
  accountType      String?  // BUSINESS, CREATOR, PERSONAL (Basic Display)

  accessToken      String   // long-lived token (Basic Display) or page token (Graph)
  tokenExpiresAt   DateTime? // when token expires if applicable

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  posts            InstagramPost[]

  @@index([userId])
}

model InstagramPost {
  id             String   @id @default(cuid())
  accountId      String
  account        InstagramAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)

  igMediaId      String   @unique
  mediaType      String   // IMAGE, VIDEO, CAROUSEL_ALBUM
  mediaUrl       String
  thumbnailUrl   String?
  permalink      String
  caption        String?
  takenAt        DateTime?

  isPublished    Boolean  @default(true) // if false, keep it hidden publicly

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([accountId, isPublished])
  @@index([takenAt])
}

model ContactMessage {
  id          String   @id @default(cuid())
  name        String
  email       String
  subject     String?
  message     String
  isRead      Boolean  @default(false)
  respondedAt DateTime?
  response    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([isRead])
  @@index([createdAt])
  @@index([email])
}

model RecentEventVideo {
  id          String   @id @default(cuid())
  title       String
  caption     String?
  videoUrl    String   // Can be uploaded file URL or external link
  videoType   String   @default("UPLOADED") // "UPLOADED" or "EXTERNAL"
  thumbnailUrl String? // For external videos, we can generate thumbnails
  duration    Int?     // Duration in seconds
  sortOrder   Int      @default(0)
  isPublished Boolean  @default(true)
  autoplay    Boolean  @default(true)  // Auto-play video on load
  loop        Boolean  @default(true)  // Loop video continuously
  muted       Boolean  @default(true)  // Mute video by default
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([isPublished, sortOrder])
  @@index([createdAt])
}

model Subscriber {
  id        String   @id @default(cuid())
  email     String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([isActive])
  @@index([createdAt])
}
